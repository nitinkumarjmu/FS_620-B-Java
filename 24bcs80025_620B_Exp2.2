import java.io.*;
import java.util.*;

// Student class for Serialization
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String name;
    double marks;

    public Student(int id, String name, double marks) {
        this.id = id;
        this.name = name;
        this.marks = marks;
    }

    public String toString() {
        return "Student[ID=" + id + ", Name=" + name + ", Marks=" + marks + "]";
    }
}

// Employee class for File Handling
class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    int empId;
    String empName;
    double salary;

    public Employee(int empId, String empName, double salary) {
        this.empId = empId;
        this.empName = empName;
        this.salary = salary;
    }

    public String toString() {
        return "Employee[ID=" + empId + ", Name=" + empName + ", Salary=" + salary + "]";
    }
}

public class PBLJ_Exp_2_2 {

    static Scanner sc = new Scanner(System.in);

    // Part A: Autoboxing & Unboxing
    public static void sumOfIntegers() {
        System.out.print("Enter number of integers: ");
        int n = sc.nextInt();
        Integer sum = 0; // Autoboxing
        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            int x = sc.nextInt();
            sum += x; // Autoboxing + Unboxing happens here
        }
        System.out.println("Sum = " + sum);
    }

    // Part B: Serialization & Deserialization
    public static void serializeStudent() {
        try {
            Student s = new Student(1, "John Doe", 89.5);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("student.ser"));
            oos.writeObject(s);
            oos.close();
            System.out.println("Student object serialized successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void deserializeStudent() {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("student.ser"));
            Student s = (Student) ois.readObject();
            ois.close();
            System.out.println("Deserialized Student: " + s);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Part C: Employee Management System
    public static void addEmployee() {
        try {
            System.out.print("Enter Employee ID: ");
            int id = sc.nextInt();
            sc.nextLine(); // consume newline
            System.out.print("Enter Employee Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Salary: ");
            double salary = sc.nextDouble();

            Employee emp = new Employee(id, name, salary);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("employees.ser", true)) {
                protected void writeStreamHeader() throws IOException {
                    reset(); // Prevent header corruption
                }
            };
            oos.writeObject(emp);
            oos.close();
            System.out.println("Employee added successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void viewEmployees() {
        try {
            File f = new File("employees.ser");
            if (!f.exists() || f.length() == 0) {
                System.out.println("No employees found.");
                return;
            }
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("employees.ser"));
            while (true) {
                try {
                    Employee emp = (Employee) ois.readObject();
                    System.out.println(emp);
                } catch (EOFException e) {
                    break;
                }
            }
            ois.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Main
    public static void main(String[] args) {
        int choice;
        do {
            System.out.println("\n--- PBLJ Experiment 2.2 ---");
            System.out.println("1. Sum of Integers (Autoboxing/Unboxing)");
            System.out.println("2. Serialize Student");
            System.out.println("3. Deserialize Student");
            System.out.println("4. Add Employee");
            System.out.println("5. View Employees");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1: sumOfIntegers(); break;
                case 2: serializeStudent(); break;
                case 3: deserializeStudent(); break;
                case 4: addEmployee(); break;
                case 5: viewEmployees(); break;
                case 0: System.out.println("Exiting..."); break;
                default: System.out.println("Invalid choice!");
            }
        } while (choice != 0);
    }
}
